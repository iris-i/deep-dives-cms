# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  posts: PostManyRelationFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input PostManyRelationFilter {
  every: PostWhereInput
  some: PostWhereInput
  none: PostWhereInput
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  posts: PostRelateToManyForUpdateInput
}

input PostRelateToManyForUpdateInput {
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  posts: PostRelateToManyForCreateInput
}

input PostRelateToManyForCreateInput {
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

type Post {
  id: ID!
  title: String
  intro: String
  publishedDate: DateTime
  body: Post_body_Document
  author: User
  status: String
  categories(where: CategoryWhereInput! = {}, orderBy: [CategoryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CategoryWhereUniqueInput): [Category!]
  categoriesCount(where: CategoryWhereInput! = {}): Int
  learningJourneys: LearningJourney
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

type Post_body_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input PostWhereUniqueInput {
  id: ID
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
  id: IDFilter
  title: StringFilter
  intro: StringFilter
  publishedDate: DateTimeNullableFilter
  author: UserWhereInput
  status: StringNullableFilter
  categories: CategoryManyRelationFilter
  learningJourneys: LearningJourneyWhereInput
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: StringNullableFilter
}

input CategoryManyRelationFilter {
  every: CategoryWhereInput
  some: CategoryWhereInput
  none: CategoryWhereInput
}

input PostOrderByInput {
  id: OrderDirection
  title: OrderDirection
  intro: OrderDirection
  publishedDate: OrderDirection
  status: OrderDirection
}

input PostUpdateInput {
  title: String
  intro: String
  publishedDate: DateTime
  body: JSON
  author: UserRelateToOneForUpdateInput
  status: String
  categories: CategoryRelateToManyForUpdateInput
  learningJourneys: LearningJourneyRelateToOneForUpdateInput
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input CategoryRelateToManyForUpdateInput {
  disconnect: [CategoryWhereUniqueInput!]
  set: [CategoryWhereUniqueInput!]
  create: [CategoryCreateInput!]
  connect: [CategoryWhereUniqueInput!]
}

input LearningJourneyRelateToOneForUpdateInput {
  create: LearningJourneyCreateInput
  connect: LearningJourneyWhereUniqueInput
  disconnect: Boolean
}

input PostUpdateArgs {
  where: PostWhereUniqueInput!
  data: PostUpdateInput!
}

input PostCreateInput {
  title: String
  intro: String
  publishedDate: DateTime
  body: JSON
  author: UserRelateToOneForCreateInput
  status: String
  categories: CategoryRelateToManyForCreateInput
  learningJourneys: LearningJourneyRelateToOneForCreateInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input CategoryRelateToManyForCreateInput {
  create: [CategoryCreateInput!]
  connect: [CategoryWhereUniqueInput!]
}

input LearningJourneyRelateToOneForCreateInput {
  create: LearningJourneyCreateInput
  connect: LearningJourneyWhereUniqueInput
}

type Snippet {
  id: ID!
  title: String
  description: String
  body: Snippet_body_Document
  categories(where: CategoryWhereInput! = {}, orderBy: [CategoryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CategoryWhereUniqueInput): [Category!]
  categoriesCount(where: CategoryWhereInput! = {}): Int
}

type Snippet_body_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input SnippetWhereUniqueInput {
  id: ID
}

input SnippetWhereInput {
  AND: [SnippetWhereInput!]
  OR: [SnippetWhereInput!]
  NOT: [SnippetWhereInput!]
  id: IDFilter
  title: StringFilter
  description: StringFilter
  categories: CategoryManyRelationFilter
}

input SnippetOrderByInput {
  id: OrderDirection
  title: OrderDirection
  description: OrderDirection
}

input SnippetUpdateInput {
  title: String
  description: String
  body: JSON
  categories: CategoryRelateToManyForUpdateInput
}

input SnippetUpdateArgs {
  where: SnippetWhereUniqueInput!
  data: SnippetUpdateInput!
}

input SnippetCreateInput {
  title: String
  description: String
  body: JSON
  categories: CategoryRelateToManyForCreateInput
}

type LearningJourney {
  id: ID!
  name: String
  description: LearningJourney_description_Document
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  categories(where: CategoryWhereInput! = {}, orderBy: [CategoryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CategoryWhereUniqueInput): [Category!]
  categoriesCount(where: CategoryWhereInput! = {}): Int
}

type LearningJourney_description_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input LearningJourneyWhereUniqueInput {
  id: ID
}

input LearningJourneyWhereInput {
  AND: [LearningJourneyWhereInput!]
  OR: [LearningJourneyWhereInput!]
  NOT: [LearningJourneyWhereInput!]
  id: IDFilter
  name: StringFilter
  posts: PostManyRelationFilter
  categories: CategoryManyRelationFilter
}

input LearningJourneyOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input LearningJourneyUpdateInput {
  name: String
  description: JSON
  posts: PostRelateToManyForUpdateInput
  categories: CategoryRelateToManyForUpdateInput
}

input LearningJourneyUpdateArgs {
  where: LearningJourneyWhereUniqueInput!
  data: LearningJourneyUpdateInput!
}

input LearningJourneyCreateInput {
  name: String
  description: JSON
  posts: PostRelateToManyForCreateInput
  categories: CategoryRelateToManyForCreateInput
}

type Category {
  id: ID!
  name: String
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  snippets(where: SnippetWhereInput! = {}, orderBy: [SnippetOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SnippetWhereUniqueInput): [Snippet!]
  snippetsCount(where: SnippetWhereInput! = {}): Int
  learningJourneys(where: LearningJourneyWhereInput! = {}, orderBy: [LearningJourneyOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LearningJourneyWhereUniqueInput): [LearningJourney!]
  learningJourneysCount(where: LearningJourneyWhereInput! = {}): Int
}

input CategoryWhereUniqueInput {
  id: ID
}

input CategoryWhereInput {
  AND: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
  id: IDFilter
  name: StringFilter
  posts: PostManyRelationFilter
  snippets: SnippetManyRelationFilter
  learningJourneys: LearningJourneyManyRelationFilter
}

input SnippetManyRelationFilter {
  every: SnippetWhereInput
  some: SnippetWhereInput
  none: SnippetWhereInput
}

input LearningJourneyManyRelationFilter {
  every: LearningJourneyWhereInput
  some: LearningJourneyWhereInput
  none: LearningJourneyWhereInput
}

input CategoryOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input CategoryUpdateInput {
  name: String
  posts: PostRelateToManyForUpdateInput
  snippets: SnippetRelateToManyForUpdateInput
  learningJourneys: LearningJourneyRelateToManyForUpdateInput
}

input SnippetRelateToManyForUpdateInput {
  disconnect: [SnippetWhereUniqueInput!]
  set: [SnippetWhereUniqueInput!]
  create: [SnippetCreateInput!]
  connect: [SnippetWhereUniqueInput!]
}

input LearningJourneyRelateToManyForUpdateInput {
  disconnect: [LearningJourneyWhereUniqueInput!]
  set: [LearningJourneyWhereUniqueInput!]
  create: [LearningJourneyCreateInput!]
  connect: [LearningJourneyWhereUniqueInput!]
}

input CategoryUpdateArgs {
  where: CategoryWhereUniqueInput!
  data: CategoryUpdateInput!
}

input CategoryCreateInput {
  name: String
  posts: PostRelateToManyForCreateInput
  snippets: SnippetRelateToManyForCreateInput
  learningJourneys: LearningJourneyRelateToManyForCreateInput
}

input SnippetRelateToManyForCreateInput {
  create: [SnippetCreateInput!]
  connect: [SnippetWhereUniqueInput!]
}

input LearningJourneyRelateToManyForCreateInput {
  create: [LearningJourneyCreateInput!]
  connect: [LearningJourneyWhereUniqueInput!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createPost(data: PostCreateInput!): Post
  createPosts(data: [PostCreateInput!]!): [Post]
  updatePost(where: PostWhereUniqueInput!, data: PostUpdateInput!): Post
  updatePosts(data: [PostUpdateArgs!]!): [Post]
  deletePost(where: PostWhereUniqueInput!): Post
  deletePosts(where: [PostWhereUniqueInput!]!): [Post]
  createSnippet(data: SnippetCreateInput!): Snippet
  createSnippets(data: [SnippetCreateInput!]!): [Snippet]
  updateSnippet(where: SnippetWhereUniqueInput!, data: SnippetUpdateInput!): Snippet
  updateSnippets(data: [SnippetUpdateArgs!]!): [Snippet]
  deleteSnippet(where: SnippetWhereUniqueInput!): Snippet
  deleteSnippets(where: [SnippetWhereUniqueInput!]!): [Snippet]
  createLearningJourney(data: LearningJourneyCreateInput!): LearningJourney
  createLearningJourneys(data: [LearningJourneyCreateInput!]!): [LearningJourney]
  updateLearningJourney(where: LearningJourneyWhereUniqueInput!, data: LearningJourneyUpdateInput!): LearningJourney
  updateLearningJourneys(data: [LearningJourneyUpdateArgs!]!): [LearningJourney]
  deleteLearningJourney(where: LearningJourneyWhereUniqueInput!): LearningJourney
  deleteLearningJourneys(where: [LearningJourneyWhereUniqueInput!]!): [LearningJourney]
  createCategory(data: CategoryCreateInput!): Category
  createCategories(data: [CategoryCreateInput!]!): [Category]
  updateCategory(where: CategoryWhereUniqueInput!, data: CategoryUpdateInput!): Category
  updateCategories(data: [CategoryUpdateArgs!]!): [Category]
  deleteCategory(where: CategoryWhereUniqueInput!): Category
  deleteCategories(where: [CategoryWhereUniqueInput!]!): [Category]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  post(where: PostWhereUniqueInput!): Post
  postsCount(where: PostWhereInput! = {}): Int
  snippets(where: SnippetWhereInput! = {}, orderBy: [SnippetOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SnippetWhereUniqueInput): [Snippet!]
  snippet(where: SnippetWhereUniqueInput!): Snippet
  snippetsCount(where: SnippetWhereInput! = {}): Int
  learningJourneys(where: LearningJourneyWhereInput! = {}, orderBy: [LearningJourneyOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LearningJourneyWhereUniqueInput): [LearningJourney!]
  learningJourney(where: LearningJourneyWhereUniqueInput!): LearningJourney
  learningJourneysCount(where: LearningJourneyWhereInput! = {}): Int
  categories(where: CategoryWhereInput! = {}, orderBy: [CategoryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CategoryWhereUniqueInput): [Category!]
  category(where: CategoryWhereUniqueInput!): Category
  categoriesCount(where: CategoryWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
